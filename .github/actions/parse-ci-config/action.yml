name: Parse CI Config File
description: Action to parse model-config-tests configurations for CI tests
inputs:
  check:
    required: true
    description: Type of check/test to run (e.g. "reproducibility", "qa" or "scheduled")
  branch-or-tag:
    required: true
    description: Name of Git branch or tag to run CI testing on
  config-filepath:
    required: true
    description: Path to CI configuration file
outputs:
  model-config-tests-version:
    value: ${{ steps.read-config.outputs.model-config-tests-version }}
    description: A version of the model-config-tests package
  python-version:
    value: ${{ steps.read-config.outputs.python-version }}
    description: The python version used to create test virtual environment for local tests (e.g. QA tests)
  markers:
    value: ${{ steps.read-config.outputs.markers }}
    description: A python expression of markers to pass to model-config-tests pytests
  payu-version:
    value: ${{ steps.read-config.outputs.payu-version }}
    description: The payu version used to create test virtual environment for remote tests (e.g. repro tests)
runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Read Configuration File
      id: read-config
      shell: bash
      run: |
        set -e
        # Use python script in parse-ci-config directory to parse CI configuration file
        python3 ${{ github.action_path }}/parse_file.py \
          --test-type "${{ inputs.check }}" \
          --reference "${{ inputs.branch-or-tag }}" \
          --config-filepath "${{ inputs.config-filepath }}" \
          --output-filepath tmp-result.json

        echo "model-config-tests-version=$(jq -r '.["model-config-tests-version"]' tmp-result.json)" >> $GITHUB_OUTPUT
        echo "python-version=$(jq -r '.["python-version"]' tmp-result.json)" >> $GITHUB_OUTPUT
        echo "markers=$(jq -r '.["markers"]' tmp-result.json)" >> $GITHUB_OUTPUT
        echo "payu-version=$(jq -r '.["payu-version"]' tmp-result.json)" >> $GITHUB_OUTPUT

        # Clean up result file
        rm result.json
